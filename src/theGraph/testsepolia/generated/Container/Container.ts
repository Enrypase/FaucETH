// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class EventCreated extends ethereum.Event {
  get params(): EventCreated__Params {
    return new EventCreated__Params(this);
  }
}

export class EventCreated__Params {
  _event: EventCreated;

  constructor(event: EventCreated) {
    this._event = event;
  }

  get name(): string {
    return this._event.parameters[0].value.toString();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get whitelist(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get withdrawLimit(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class EventVisibilityChanged extends ethereum.Event {
  get params(): EventVisibilityChanged__Params {
    return new EventVisibilityChanged__Params(this);
  }
}

export class EventVisibilityChanged__Params {
  _event: EventVisibilityChanged;

  constructor(event: EventVisibilityChanged) {
    this._event = event;
  }

  get name(): string {
    return this._event.parameters[0].value.toString();
  }

  get value(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class Container__getUserRedeemResultValue0Struct extends ethereum.Tuple {
  get time(): BigInt {
    return this[0].toBigInt();
  }

  get total(): BigInt {
    return this[1].toBigInt();
  }
}

export class Container extends ethereum.SmartContract {
  static bind(address: Address): Container {
    return new Container("Container", address);
  }

  getEventWithdrawLimit(code: string): BigInt {
    let result = super.call(
      "getEventWithdrawLimit",
      "getEventWithdrawLimit(string):(uint256)",
      [ethereum.Value.fromString(code)]
    );

    return result[0].toBigInt();
  }

  try_getEventWithdrawLimit(code: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEventWithdrawLimit",
      "getEventWithdrawLimit(string):(uint256)",
      [ethereum.Value.fromString(code)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEvetBalance(code: string): BigInt {
    let result = super.call(
      "getEvetBalance",
      "getEvetBalance(string):(uint256)",
      [ethereum.Value.fromString(code)]
    );

    return result[0].toBigInt();
  }

  try_getEvetBalance(code: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEvetBalance",
      "getEvetBalance(string):(uint256)",
      [ethereum.Value.fromString(code)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserEvents(): Array<string> {
    let result = super.call("getUserEvents", "getUserEvents():(string[])", []);

    return result[0].toStringArray();
  }

  try_getUserEvents(): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      "getUserEvents",
      "getUserEvents():(string[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  getUserEvents1(user: Address): Array<string> {
    let result = super.call(
      "getUserEvents",
      "getUserEvents(address):(string[])",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toStringArray();
  }

  try_getUserEvents1(user: Address): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      "getUserEvents",
      "getUserEvents(address):(string[])",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  getUserRedeem(
    code: string,
    user: Address
  ): Container__getUserRedeemResultValue0Struct {
    let result = super.call(
      "getUserRedeem",
      "getUserRedeem(string,address):((uint256,uint256))",
      [ethereum.Value.fromString(code), ethereum.Value.fromAddress(user)]
    );

    return changetype<Container__getUserRedeemResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getUserRedeem(
    code: string,
    user: Address
  ): ethereum.CallResult<Container__getUserRedeemResultValue0Struct> {
    let result = super.tryCall(
      "getUserRedeem",
      "getUserRedeem(string,address):((uint256,uint256))",
      [ethereum.Value.fromString(code), ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Container__getUserRedeemResultValue0Struct>(value[0].toTuple())
    );
  }

  getWithdrawInterval(code: string): BigInt {
    let result = super.call(
      "getWithdrawInterval",
      "getWithdrawInterval(string):(uint256)",
      [ethereum.Value.fromString(code)]
    );

    return result[0].toBigInt();
  }

  try_getWithdrawInterval(code: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getWithdrawInterval",
      "getWithdrawInterval(string):(uint256)",
      [ethereum.Value.fromString(code)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isEventPublic(code: string): boolean {
    let result = super.call("isEventPublic", "isEventPublic(string):(bool)", [
      ethereum.Value.fromString(code)
    ]);

    return result[0].toBoolean();
  }

  try_isEventPublic(code: string): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isEventPublic",
      "isEventPublic(string):(bool)",
      [ethereum.Value.fromString(code)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isUserOwner(code: string, user: Address): boolean {
    let result = super.call(
      "isUserOwner",
      "isUserOwner(string,address):(bool)",
      [ethereum.Value.fromString(code), ethereum.Value.fromAddress(user)]
    );

    return result[0].toBoolean();
  }

  try_isUserOwner(code: string, user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isUserOwner",
      "isUserOwner(string,address):(bool)",
      [ethereum.Value.fromString(code), ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isUserWhitelisted(code: string, user: Address): boolean {
    let result = super.call(
      "isUserWhitelisted",
      "isUserWhitelisted(string,address):(bool)",
      [ethereum.Value.fromString(code), ethereum.Value.fromAddress(user)]
    );

    return result[0].toBoolean();
  }

  try_isUserWhitelisted(
    code: string,
    user: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isUserWhitelisted",
      "isUserWhitelisted(string,address):(bool)",
      [ethereum.Value.fromString(code), ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class CreateEventCall extends ethereum.Call {
  get inputs(): CreateEventCall__Inputs {
    return new CreateEventCall__Inputs(this);
  }

  get outputs(): CreateEventCall__Outputs {
    return new CreateEventCall__Outputs(this);
  }
}

export class CreateEventCall__Inputs {
  _call: CreateEventCall;

  constructor(call: CreateEventCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get whitelist(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get withdrawLimit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get withdrawInterval(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateEventCall__Outputs {
  _call: CreateEventCall;

  constructor(call: CreateEventCall) {
    this._call = call;
  }
}

export class DonateTokensCall extends ethereum.Call {
  get inputs(): DonateTokensCall__Inputs {
    return new DonateTokensCall__Inputs(this);
  }

  get outputs(): DonateTokensCall__Outputs {
    return new DonateTokensCall__Outputs(this);
  }
}

export class DonateTokensCall__Inputs {
  _call: DonateTokensCall;

  constructor(call: DonateTokensCall) {
    this._call = call;
  }

  get code(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class DonateTokensCall__Outputs {
  _call: DonateTokensCall;

  constructor(call: DonateTokensCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get defaultWithdrawLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get defaultInterval(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class UpdatePublicCall extends ethereum.Call {
  get inputs(): UpdatePublicCall__Inputs {
    return new UpdatePublicCall__Inputs(this);
  }

  get outputs(): UpdatePublicCall__Outputs {
    return new UpdatePublicCall__Outputs(this);
  }
}

export class UpdatePublicCall__Inputs {
  _call: UpdatePublicCall;

  constructor(call: UpdatePublicCall) {
    this._call = call;
  }

  get code(): string {
    return this._call.inputValues[0].value.toString();
  }

  get isPublic(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class UpdatePublicCall__Outputs {
  _call: UpdatePublicCall;

  constructor(call: UpdatePublicCall) {
    this._call = call;
  }
}

export class UpdateWhitelistCall extends ethereum.Call {
  get inputs(): UpdateWhitelistCall__Inputs {
    return new UpdateWhitelistCall__Inputs(this);
  }

  get outputs(): UpdateWhitelistCall__Outputs {
    return new UpdateWhitelistCall__Outputs(this);
  }
}

export class UpdateWhitelistCall__Inputs {
  _call: UpdateWhitelistCall;

  constructor(call: UpdateWhitelistCall) {
    this._call = call;
  }

  get code(): string {
    return this._call.inputValues[0].value.toString();
  }

  get user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class UpdateWhitelistCall__Outputs {
  _call: UpdateWhitelistCall;

  constructor(call: UpdateWhitelistCall) {
    this._call = call;
  }
}

export class UpdateWithdrawLimitCall extends ethereum.Call {
  get inputs(): UpdateWithdrawLimitCall__Inputs {
    return new UpdateWithdrawLimitCall__Inputs(this);
  }

  get outputs(): UpdateWithdrawLimitCall__Outputs {
    return new UpdateWithdrawLimitCall__Outputs(this);
  }
}

export class UpdateWithdrawLimitCall__Inputs {
  _call: UpdateWithdrawLimitCall;

  constructor(call: UpdateWithdrawLimitCall) {
    this._call = call;
  }

  get code(): string {
    return this._call.inputValues[0].value.toString();
  }

  get withdrawLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateWithdrawLimitCall__Outputs {
  _call: UpdateWithdrawLimitCall;

  constructor(call: UpdateWithdrawLimitCall) {
    this._call = call;
  }
}

export class WithdrawTokensCall extends ethereum.Call {
  get inputs(): WithdrawTokensCall__Inputs {
    return new WithdrawTokensCall__Inputs(this);
  }

  get outputs(): WithdrawTokensCall__Outputs {
    return new WithdrawTokensCall__Outputs(this);
  }
}

export class WithdrawTokensCall__Inputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }

  get code(): string {
    return this._call.inputValues[0].value.toString();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawTokensCall__Outputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }
}
